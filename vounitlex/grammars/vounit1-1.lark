

input: complete_expression
| scalefactor complete_expression
| LIT1

complete_expression: product_of_units
| product_of_units division unit_expression

product_of_units: unit_expression
    | product_of_units product unit_expression

unit_expression: term
| function_application
| OPEN_P complete_expression CLOSE_P

function_application: STRING OPEN_P function_operand CLOSE_P
function_operand: complete_expression
| scalefactor complete_expression

scalefactor: LIT10 power numeric_power
| LIT10
| LIT1
| VOUFLOAT

division: DIVISION
term: unit
| unit power numeric_power

unit: STRING
| QUOTED_STRING
| STRING QUOTED_STRING
| PERCENT

power: STARSTAR

numeric_power: integer
| parenthesized_number

parenthesized_number: OPEN_P integer CLOSE_P
| OPEN_P FLOAT CLOSE_P
| OPEN_P integer division UNSIGNED_INTEGER CLOSE_P

integer: SIGNED_INTEGER | UNSIGNED_INTEGER
product: DOT


// TERMINALS

CARET: "^"
DIVISION: "/"
DOT: "."
FLOAT: /[-+]?[0-9]+.[0-9]+/
LIT1: "1"
LIT10: "10"
OPEN_P: "("
CLOSE_P: ")"
STAR: "*"
STARSTAR: "**"
WHITESPACE: /\s/
PERCENT: "%"

VOUFLOAT: /0.[0-9]+([eE][+-]?[0-9]+)?/
    | /[1-9][0-9]*(.[0-9]+)?([eE][+-]?[0-9]+)?/

// consumes all base units, scaling prefixes
STRING: /[a-zA-Z]+/
QUOTED_STRING: "'" STRING "'"

%import common.INT -> UNSIGNED_INTEGER
%import common.SIGNED_INT -> SIGNED_INTEGER
